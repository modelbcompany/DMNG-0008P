/// ----------------------------------------------------------------------------
/// List variables, functions, mixins, placeholders, and styles
/// @group List
/// ----------------------------------------------------------------------------

// Variables

/// Dropdown List border
/// @require {function} size
/// @require {variable} $border-color
/// @require {variable} $border-style
/// @require {variable} $border-width
/// @type List
$dropdown-element-border: size($border-width) $border-style $border-color;

// Functions

// Mixins

/// List reset styles
/// @require {mixin} no-margin
/// @require {mixin} no-padding
@mixin reset-list-element {
  @include no-margin;

  @include no-padding;
}

/// Dropdown List styles
/// @require {function} size
/// @require {mixin} absolute
/// @require {mixin} background-color
/// @require {mixin} constrain
/// @require {mixin} display-flex
/// @require {mixin} flex-column
/// @require {mixin} is-hidden
/// @require {mixin} reset-list-element
/// @require {mixin} sticky
/// @require {variable} $dropdown-element-border
/// @require {variable} $grey-200
/// @require {variable} $transparent
/// @param {String} $context [null] Selector context
@mixin is-dropdown-list($context: null) {
  @if $context == null {
    @include background-color($white);

    @include constrain(max-content);

    @include constrain(max-content, height);

    @include display-flex;

    @include flex-column;

    @include reset-list-element;

    @include sticky(100%, null, null, null);

    align-items: flex-start;
    border: $dropdown-element-border;
    overflow-y: scroll;

    &:empty {
      // @include is-hidden
    }

    &::after {
      $arrow-width: 7.5;

      @include absolute(null, 9.5%, 100%, null);

      border: {
        color: $transparent $transparent $grey-200 $transparent;
        style: solid;
        width: size($arrow-width);
      }
      margin-left: size($arrow-width * -1);
    }

    &[data-controlled] {
      @include is-full-width;

      @include transition(all, 0.375s, ease-in-out);

      &[data-expanded] {
        @include absolute(size(20));
      }
    }
  } @else if $context == adm-dropdown {
    @todo;
  } @else if $context == menu-item {
  }
}

// Placeholders

/// List component styles
%List {
  @todo;
}

/// Menu component styles
/// @require {mixin} display-flex
/// @require {mixin} is-flex-centered
/// @require {mixin} reset-list-element
/// @require {mixin} width
%Menu {
  @include display-flex;

  @include is-flex-centered;

  @include reset-list-element;

  @include width(max-content, unset, none);
}

// Styles

// List
.adm-list {
  @extend %List;
}

.dropdown-list,
.dropdown-menu {
  @include is-dropdown-list;
}

// Menu
.menu {
  @extend %Menu;
}

// Responsive Styles

// Desktop

// Tablet

// Mobile
