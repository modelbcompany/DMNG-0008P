/// ----------------------------------------------------------------------------
/// Grid Utilities
/// @group utils-grid
/// ----------------------------------------------------------------------------

/// ----------------------------------------------------------------------------
/// Dependencies
/// ----------------------------------------------------------------------------

@import '../settings/grid.settings';

/// ----------------------------------------------------------------------------
/// Functions
/// ----------------------------------------------------------------------------

/// Retreives the column gutter width based on layout size.
/// @require {variable} $grid-gutter-widths
/// @param {String} $layout-size ['lg'] - Layout size. 'sm' | 'md' | 'lg'
@function grid-column-gap($layout-size: 'lg') {
  @return size(map-get($grid-gutter-widths, $layout-size));
}

/// Retreives the number of grid columns based on layout size.
/// @require {variable} $grid-columns
/// @param {String} $layout-size ['lg'] - Layout size. 'sm' | 'md' | 'lg'
@function grid-template-columns($layout-size: 'lg') {
  @return #{repeat(map-get($grid-columns, $layout-size)), 1fr)};
}

/// ----------------------------------------------------------------------------
/// Mixins
/// ----------------------------------------------------------------------------

/// Defines the element as a grid container and establishes a new grid
/// formatting context for its contents.
/// @param {String} $display [grid] - display
@mixin display-grid($display: grid) {
  display: $display;
}

/// Specifies the size of the grid lines.
/// Think of it like setting the width of the gutters between the columns.
/// @param {Number} $gap - line-size
@mixin grid-column-gap($gap) {
  grid-column-gap: $gap;
}

/// Defines the columns of the grid.
/// The values represent the track size, and the space between them represents
/// the grid line.
/// @param {List} $columns - Space separated list of grid column values
@mixin grid-template-columns($columns...) {
  grid-template-columns: $columns;
}

/// Defines the rows of the grid.
/// The values represent the track size, and the space between them represents
/// the grid line.
/// @param {List} $rows - Space separated list of grid row values
@mixin grid-template-rows($rows...) {
  grid-template-rows: $rows;
}

/// Defines a grid that responds to device width.
/// @require {function} grid-column-gap
/// @require {function} grid-template-columns
/// @require {mixin} display-grid
/// @require {mixin} grid-column-gap
/// @require {mixin} grid-template-columns
/// @require {mixin} respond-to
/// @require {variable} $breakpoint-1024
/// @require {variable} $breakpoint-414
@mixin responsive-grid {
  @include display-grid(grid);

  @include grid-column-gap(grid-column-gap());

  @include grid-template-columns(grid-template-columns());

  @include respond-to($breakpoint-1024) {
    @include grid-column-gap(grid-column-gap('md'));

    @include grid-template-columns(grid-template-columns('md'));
  }

  @include respond-to($breakpoint-414) {
    @include grid-column-gap(grid-column-gap('sm'));

    @include grid-template-columns(grid-template-columns('sm'));
  }

  @content;
}